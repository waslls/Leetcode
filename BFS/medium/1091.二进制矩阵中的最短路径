#search-->bfs
#核心在于知道按层搜索到右下角即是最短，因此扩展过的节点不能再扩展。
#思路：由于每个节点的子节点不确定，且不同路径深度不同，故使用bfs，而不是dfs。本题考虑使用队列而不是优先级队列，因为可证明按照深度一层层搜（搜过的不再搜），每个节点都是当前最优。第一次
       到达右下角即为最优路径，证明：数学归纳法，第一个节点是最优（左上），假设第k个是最优，则第k+1（可达到的八邻域）必是最优，因为节点间权重都是1，只有相邻的才最短。
代码框架：
  def main(grad[n][n]):
    判断边界：若左上或右下为1，返回-1。及特殊情况[[0]]要返回1,
    建立8邻域位置索引dx=[-1,-1,-1,0,0,1,1,1],dy=[-1,0,1,-1,1,-1,0,1]（三个三个看）
    建立和grad一样大小的数组dist保存每个节点到原点的最短路径，最后只要输出右下角值即可（搜过的状态用dist代替，若dist[i][j]不为0，则这一点搜过了），初始化dist[0][0]为1，因为自己到自己算1
    建立队列qu，将左上元素push进。
    while（!qu.is_empty()）:
      cur = qu.front(), qu.pop()
      nx = t(0);ny=t(1)
      for i in range(8):
        x = nx + dx[i],y = ny + dy[i]
        判断是否是合理路径（x，y不越界；没搜过；grad位置不为1）,不满足直接continue
        dist[x][y] = dist[nx][ny] + 1
        判断是否已到右下角，若是，直接返回dist[x][y]（前面已判断过是合理的了）
        若没到，节点加入队列
    若qu空了都没找到，返回-1
