#自己：很麻烦，先处理千位在处理百位然后是10位个位（定义多个函数），每位处理定义一个函数，输入上一位处理后取余的结果，每个函数在地板除对应数后(如处理百位就//100)都要判断是1-3,4,5,6-8还是9
#之前以为不断地地板除的取余只有对10 100 1000才有效，事实证明加上其他数如400 900也没问题（下方代码1）

#官方和评论：两个代码都很好，关键是用哈希表存储包括4 9 40 90 400 900的对应字符，然后一个是不断地地板除+取余 另一个是不断地减
def intToRoman(self, num: int) -> str:
    p1 = [1000,900,500,400,100,90,50,40,10,9,5,4,1]
    p2 = ['M','CM','D','CD','C','XC','L','XL','X','IX','V','IV','I']
    rec = []
    ans = ''
    for i in range(13):
        rec.append(p2[i]*(num//p1[i]))
        num %= p1[i]
    for i in rec:
        ans += i
    return ans
 #后三句可改为：return "".join(rec)
 #、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
    VALUE_SYMBOLS = [(1000, "M"),(900, "CM"),(500, "D"),(400, "CD"),(100, "C"),(90, "XC"),(50, "L"),(40, "XL"),(10, "X"),(9, "IX"),(5, "V"),(4, "IV"), (1, "I"),]
    def intToRoman(self, num: int) -> str:
        roman = list()
        for value, symbol in Solution.VALUE_SYMBOLS:
            while num >= value:
                num -= value
                roman.append(symbol)
            if num == 0:
                break
        return "".join(roman)
